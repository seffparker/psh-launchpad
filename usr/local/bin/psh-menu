#!/bin/bash

# Interactive menu to select or search servers and pass to psh script
# Author: Seff Parker
# Version: 20201108

exec 3>&2 # Hide stderr
source /etc/psh/default.conf

confirmExit () {
        if dialog --stdout --yesno "Do you want to exit the $MAIN_TITLE" 6 60
                then
                exit 0
        else
		unset LC_0
		exec ${PSH_MENU_BIN}
        fi
}

trap confirmExit INT

mainMenu () {
        MAIN_MENU=$(dialog  --stdout --no-ok --no-cancel  --backtitle "$MAIN_TITLE" --menu "Select an Option" 0 50 0 1 "Search a hostname or IP" 2 "Select a ${CATEGORY} from list" 3 "View recent history" 4 "Exit from psh-menu")
        case $MAIN_MENU in
                1)
                        searchServer
                        ;;
                2)
                        selectCategory
                        ;;
                3)
                        viewHistory
                        ;;
		4)
			exit
			;;
                *)
                        confirmExit
                        ;;
        esac
}

selectCategory () {
        CATEGORY_LIST=$(find $ROOT_DIR/ -maxdepth 1 -type d -readable  | awk -F / '{print $NF}' | sort | nl)
        CATEGORY_INDEX=$(dialog --stdout --scrollbar --no-ok --no-cancel --menu "Select a ${CATEGORY}" 0 0 0 "<-" "Back to Main Menu" $CATEGORY_LIST)
        if [[ $CATEGORY_INDEX == "<-" || -z $CATEGORY_INDEX ]]
                then mainMenu
        else
                CATEGORY_NAME=$(echo "$CATEGORY_LIST" | awk -v INDEX=$CATEGORY_INDEX '$1 == INDEX {print $2}')
                selectServer
        fi
}

selectServer () {
        SERVER_LIST=$(find $ROOT_DIR/$CATEGORY_NAME/ -maxdepth 1 -type f -readable | awk -F / '{print $NF}' | sort | nl)
        SERVER_INDEX=$(dialog --stdout --scrollbar --no-ok --no-cancel --menu "Select a Server" 0 0 0 "<-" "Back to ${CATEGORY} list" $SERVER_LIST)
        if [[ $SERVER_INDEX == "<-" || -z $SERVER_INDEX ]]
                then
                selectCategory
        else
                SERVER_NAME=$(echo "$SERVER_LIST" | awk -v INDEX=$SERVER_INDEX '$1 == INDEX {print $2}')
                FULL_PATH="$ROOT_DIR/$CATEGORY_NAME/$SERVER_NAME"
        fi
}

viewHistory () {
        HISTORY_LIST=$(cut -d' ' -f1 ${PSH_HISTORY_FILE} | tail -n ${PSH_HISTORY_LENGTH} | tac | nl)
        HISTORY_INDEX=$(dialog --stdout --scrollbar --no-ok --no-cancel --menu "Select a server" 0 0 0 "<-" "Back to Main Menu" ${HISTORY_LIST})
        if [[ $HISTORY_INDEX == "<-" || -z $HISTORY_INDEX ]]
                then mainMenu
        else
                HISTORY_ITEM=$(echo "$HISTORY_LIST" | awk -v INDEX=$HISTORY_INDEX '$1 == INDEX {print $2}')
                searchServer $HISTORY_ITEM
        fi
}

saveHistory() {
        ENTRY=$(echo "$1" | xargs -L 1 basename)
        sed -i "/$ENTRY/d" ${PSH_HISTORY_FILE}
        echo "$ENTRY" >> ${PSH_HISTORY_FILE}
        echo "$(tail -n ${PSH_HISTORY_LENGTH} ${PSH_HISTORY_FILE})" > ${PSH_HISTORY_FILE}
}

searchServer () {

	# Prepare the input
        if [ "$1" ]
                then INPUT=$1
        else
                INPUT=$(dialog --stdout --no-cancel --inputbox "Search a hostname or IP" 0 50)
        fi
        INPUT=$(echo $INPUT | sed -E 's|^.*//||g' | sed 's|^www\.||g' | cut -d'/' -f1 | sed 's/\.$//g')
        # echo "DEBUG: input is $INPUT"

        if [[ ! -z "$INPUT" ]]
                then

		# Find matching filename
		MATCHES_FULLPATH=$(find -L $ROOT_DIR -iname "*$INPUT*" -type f -readable)

		# Or try matching contents
		[[ -z $MATCHES_FULLPATH ]] && MATCHES_FULLPATH=$(grep -ril "$INPUT" $ROOT_DIR)

		# Or, try rDNS for IP
                if [[ -z $MATCHES_FULLPATH ]] && echo "$INPUT" | grep -Pq "^[\d]+\.[\d]+\.[\d]+\.[\d]+\$"
                        then
                        # echo "DEBUG: input $INPUT is an IP"
                        INPUT=$(dig +short -x $INPUT)
                        if [[ ! -z $INPUT ]]
				then searchServer $INPUT
                        	return
			fi
                fi

		# Or, try DNS for domain name
		if [[ -z $MATCHES_FULLPATH && -z "$DNS_TRIED" ]]
			then
			for DNS_SERVER in $DNS_SERVERS
				do
				IP_FROM_DOMAIN=$(dig @${DNS_SERVER} +short "$INPUT" | head -1)
				[[ ! -z $IP_FROM_DOMAIN ]] && break
			done
			if [[ "$IP_FROM_DOMAIN" ]]
                                then
                                DNS_TRIED=true
                                SEARCH_DOMAIN=$INPUT
                                searchServer $IP_FROM_DOMAIN
				return
			fi
		fi

                MATCHES_COUNT=$(echo "$MATCHES_FULLPATH" | grep -c .)
                if [[ $MATCHES_COUNT == 0 ]]
			then
                        dialog --colors --msgbox "\Z1No matches found!\Zn" 7 50
                        unset SEARCH_DOMAIN DNS_TRIED
                        CLEAR=1
                        searchServer
                        return
                elif [[ $MATCHES_COUNT == 1 ]]
                        then FULL_PATH=$MATCHES_FULLPATH
                else
                        CLEAR=1
                        MATCHES_INDEXED=$(echo "$MATCHES_FULLPATH" | xargs -L 1 basename | sort | nl)
                        FULL_PATH_INDEX=$(dialog --stdout --scrollbar --no-ok --no-cancel --menu "Multiple matches found" 0 0 0  "<-" "Search again" $MATCHES_INDEXED)
                        if [[ $FULL_PATH_INDEX == "<-" || -z $FULL_PATH_INDEX ]]
                                then
                                searchServer
                                return
                        else
                                SERVER_NAME=$(echo "$MATCHES_INDEXED" | awk -v INDEX=$FULL_PATH_INDEX '$1 == INDEX {print $2}')
                                searchServer $SERVER_NAME
                        fi
                fi
        else
                mainMenu
        fi
}

# Check if search string is passed from client's machine
if [ $LC_0 ]
        then
        searchServer $LC_0
else
        mainMenu
        CLEAR=1
fi
# [[ "$CLEAR" ]] && clear

saveHistory ${FULL_PATH}

exec 2>&3 3>&- # Restore stderr
sudo ${PSH_LOGIN_BIN} ${FULL_PATH} ${SEARCH_DOMAIN}

unset LC_0
exec ${PSH_MENU_BIN}
